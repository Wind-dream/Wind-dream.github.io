<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发-IDEA初始化</title>
      <link href="/2022/10/07/tnkaud/"/>
      <url>/2022/10/07/tnkaud/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664777683044-babf9c61-0aae-4fcf-bdc7-05853c849898.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=1256&id=ub1d540fc&margin=%5Bobject%20Object%5D&name=02.png&originHeight=1256&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2768892&status=done&style=none&taskId=uf9ce250f-3e66-4683-905a-866ad4620f4&title=&width=1920" alt="02.png"></p><h3 id="IDEA-自动导包、删除无用包、鼠标悬浮提示"><a href="#IDEA-自动导包、删除无用包、鼠标悬浮提示" class="headerlink" title="IDEA 自动导包、删除无用包、鼠标悬浮提示"></a>IDEA 自动导包、删除无用包、鼠标悬浮提示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778128024-81ccc277-149e-4425-bd52-bb66d7ba983e.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=357&id=u137ae7ec&margin=%5Bobject%20Object%5D&name=image.png&originHeight=357&originWidth=895&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34155&status=done&style=none&taskId=u7ae60d61-23a0-4700-a941-4ad973f5599&title=&width=895" alt="image.png"></p><h3 id="字号、文本大小"><a href="#字号、文本大小" class="headerlink" title="字号、文本大小"></a>字号、文本大小</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778193075-326a9325-1722-4fc1-bb90-d2ea0187d28f.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=534&id=u61d54c18&margin=%5Bobject%20Object%5D&name=image.png&originHeight=534&originWidth=1010&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72068&status=done&style=none&taskId=u53e1c822-f068-4c68-b950-71b42f94c75&title=&width=1010" alt="image.png"></p><h3 id="开启文档注释"><a href="#开启文档注释" class="headerlink" title="开启文档注释"></a>开启文档注释</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778321326-ac6da07d-559d-4cb6-950b-39052b1b01af.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=723&id=u3ae99f96&margin=%5Bobject%20Object%5D&name=image.png&originHeight=723&originWidth=881&originalType=binary&ratio=1&rotation=0&showTitle=false&size=65663&status=done&style=none&taskId=u1c50fea3-be6c-44f2-beb1-b616c702482&title=&width=881" alt="image.png"></p><h3 id="忽略大小写提示"><a href="#忽略大小写提示" class="headerlink" title="忽略大小写提示"></a>忽略大小写提示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778442372-6a31b10f-3715-49f1-8f21-34a70ddbf225.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=315&id=uc89e2c4d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=315&originWidth=1064&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39089&status=done&style=none&taskId=u1898db3f-24ad-4fff-a871-10d9416a0dc&title=&width=1064" alt="image.png"></p><h3 id="修改注释颜色"><a href="#修改注释颜色" class="headerlink" title="修改注释颜色"></a>修改注释颜色</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778557631-044f6826-7db9-4996-8b9a-501e62db5c6b.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=343&id=uaef97f9c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=343&originWidth=1204&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39684&status=done&style=none&taskId=u4b707aff-4fb3-4775-a73d-487060ff807&title=&width=1204" alt="image.png"></p><h3 id="修改编码集规范"><a href="#修改编码集规范" class="headerlink" title="修改编码集规范"></a>修改编码集规范</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778633253-56919f43-33eb-472e-b37b-7775cf2df616.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=878&id=u7503d56a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=878&originWidth=1222&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87997&status=done&style=none&taskId=uf2e9f666-97c3-4218-a1f7-43a74571448&title=&width=1222" alt="image.png"></p><h3 id="开启自动编译"><a href="#开启自动编译" class="headerlink" title="开启自动编译"></a>开启自动编译</h3><h4 id="开启自动编译-1"><a href="#开启自动编译-1" class="headerlink" title="开启自动编译"></a>开启自动编译</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778721994-8767e962-2640-48b8-baeb-553edcd25d8e.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=428&id=u84a68b40&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=1222&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60447&status=done&style=none&taskId=ueea16fb6-4ebb-4a65-9b85-f73403000c3&title=&width=1222" alt="image.png"></p><h4 id="开启热部署"><a href="#开启热部署" class="headerlink" title="开启热部署"></a>开启热部署</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778986709-79e494d4-4961-48ee-9052-af8eeaaf082e.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=228&id=u9d987c4b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=228&originWidth=842&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17462&status=done&style=none&taskId=u5a9c44c7-b6f0-49af-9c75-677694846f8&title=&width=842" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779059460-9b87cee0-6b86-4ec7-90d8-1f041179bef1.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=279&id=u80708da4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=279&originWidth=929&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18679&status=done&style=none&taskId=u827efaf2-4439-4b2e-8b93-ce4cdfa4109&title=&width=929" alt="image.png"></p><h4 id="在-pom-xml-中添加热部署配置文件："><a href="#在-pom-xml-中添加热部署配置文件：" class="headerlink" title="在 pom.xml 中添加热部署配置文件："></a>在 pom.xml 中添加热部署配置文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--支持热部署 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="快捷键修改（谨慎选择）"><a href="#快捷键修改（谨慎选择）" class="headerlink" title="快捷键修改（谨慎选择）"></a>快捷键修改（谨慎选择）</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778823361-c9296f80-bb57-4cff-a7c7-666b1da00313.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=183&id=u1f196705&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=644&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12412&status=done&style=none&taskId=ud160d57b-017c-4473-88ae-a08a6779a03&title=&width=644" alt="image.png"></p><h3 id="设置自动保存"><a href="#设置自动保存" class="headerlink" title="设置自动保存"></a>设置自动保存</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664778897382-d428c9b6-9a55-4641-8493-2bddfeb05f29.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=539&id=ucd3d87c2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=539&originWidth=969&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51452&status=done&style=none&taskId=u06950bd9-3eb2-4670-ad12-685ab468652&title=&width=969" alt="image.png"></p><h3 id="设置构造方法提示"><a href="#设置构造方法提示" class="headerlink" title="设置构造方法提示"></a>设置构造方法提示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779312095-43b8c063-a105-4767-accf-1ff83e9c23bc.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=312&id=ua9de15f2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=312&originWidth=939&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31488&status=done&style=none&taskId=u8ccb01ab-1a0c-4616-a7b8-3f8bb99eb88&title=&width=939" alt="image.png"></p><h3 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779404851-5d36ba52-d4ad-4820-a10e-0fee4d2a3e43.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=371&id=u8bed766c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=371&originWidth=989&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30889&status=done&style=none&taskId=ufd30fd0f-00a9-471d-b1a5-d9fc5c851d8&title=&width=989" alt="image.png"></p><h3 id="关闭打开项目为最后关闭项目"><a href="#关闭打开项目为最后关闭项目" class="headerlink" title="关闭打开项目为最后关闭项目"></a>关闭打开项目为最后关闭项目</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779437100-9106bb1e-a23a-4f14-979d-58547bfc516f.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=253&id=u536f44d0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=253&originWidth=1032&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24193&status=done&style=none&taskId=u5f6f5930-4138-4fa6-9ca3-25e2be5c6dc&title=&width=1032" alt="image.png"></p><h3 id="关闭-Tab-页多行显示"><a href="#关闭-Tab-页多行显示" class="headerlink" title="关闭 Tab 页多行显示"></a>关闭 Tab 页多行显示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779533756-749f0874-103c-4481-8700-a00904496db3.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=346&id=u2083b3c4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=346&originWidth=788&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31413&status=done&style=none&taskId=uafc5fc53-0668-4cca-8328-fdc4ca08479&title=&width=788" alt="image.png"></p><h3 id="添加方法间分割线"><a href="#添加方法间分割线" class="headerlink" title="添加方法间分割线"></a>添加方法间分割线</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779578186-fee2714a-7400-4ebb-8653-01f93c15b07b.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=233&id=u6f3deb92&margin=%5Bobject%20Object%5D&name=image.png&originHeight=233&originWidth=798&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25174&status=done&style=none&taskId=u1afa753c-976b-432f-9e66-505f4cf07a6&title=&width=798" alt="image.png"></p><h3 id="java-注释优化代码前空格格式"><a href="#java-注释优化代码前空格格式" class="headerlink" title="java 注释优化代码前空格格式"></a>java 注释优化代码前空格格式</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779684144-b7c6aa4d-6143-4df5-8786-5b51d7eea0d2.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=839&id=ub8621c8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=839&originWidth=1222&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87809&status=done&style=none&taskId=u0622f2e6-7842-4ae1-81b7-e36a328a649&title=&width=1222" alt="image.png"></p><h3 id="去除-IDEA-自带的-iml-文件，以及-idea-文件夹"><a href="#去除-IDEA-自带的-iml-文件，以及-idea-文件夹" class="headerlink" title="去除 IDEA 自带的.iml 文件，以及.idea 文件夹"></a>去除 IDEA 自带的.iml 文件，以及.idea 文件夹</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664779806587-8ba5d1c2-54a5-49ef-b363-f45c9a5fb8c1.png#clientId=u0e1fd7d7-8d9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=878&id=ub6c7288e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=878&originWidth=1222&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83850&status=done&style=none&taskId=u9a91724f-0ceb-498b-975b-962c621570a&title=&width=1222" alt="image.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/03/gou9o9/"/>
      <url>/2022/10/03/gou9o9/</url>
      
        <content type="html"><![CDATA[<p>晚上我给同事说外包的那两个人很菜，我们笑了一路。<br>分开走后，我走到了广场上，看着下边的老人跳着广场舞，感觉我离他们好远好远，就像高楼和茅草屋排在一起，显得突兀。<br>其实我以前何尝不是这样菜，因为我也菜，如果突然对一个项目进行开发，并且对他一无所知，那很大的可能就是败北。他们也一样，对我们的项目一无所知就去开发，所以在我眼里，他们就很局促。<br>那个老头，头发都秃了，头屑一大把，在我对他们提问的时候，他是那么的慌张。他就像被时代抛弃的人，虽然可怜，但是历史的车轮滚滚向前，不进步只能被抛弃。<br>我很佩服老大，总是宠辱不惊，感觉就没有让他能够惊慌的事情，这种修养也是我应该学习的。<br>人生海海，山山而川，不过尔尔。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>工具-mysql连接宝塔面板</title>
      <link href="/2022/10/01/gptugd/"/>
      <url>/2022/10/01/gptugd/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>在宝塔界面开放接口<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664628966740-d1774e69-071e-4892-b176-ab052a6abfb5.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=258&id=u728703dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=258&originWidth=1113&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25023&status=done&style=none&taskId=u7decea6d-1c5e-4ead-90e8-db038a8bffa&title=&width=1113" alt="image.png"></p><h3 id="方法-1：创建账号登陆"><a href="#方法-1：创建账号登陆" class="headerlink" title="方法 1：创建账号登陆"></a>方法 1：创建账号登陆</h3><ul><li>登陆 <code>phpMyAdmin</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664629016423-2c279039-9d0f-4339-a6a8-21274d504f2c.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=158&id=u53da71f7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=489&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13815&status=done&style=none&taskId=u2e981a79-2ac5-4ea3-9c38-ad437ca041e&title=&width=489" alt="image.png"></li><li>登陆<a href="https://www.ip138.com/">www.ip138.com</a>查询自己的 IP 地址</li><li>创建用户<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664629120331-1a512c81-ca29-48fe-961f-c07ff50bdb9a.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=535&id=u89c15a2b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=535&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18903&status=done&style=none&taskId=u46463ce0-7d3a-4e77-9625-31dcac101a5&title=&width=538" alt="image.png"></li><li>填写如下信息，注意用户名是 mysql 远程登陆的名字，主机名就是域名，选择文本域，然后勾选全选<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664629224148-e82a6163-0c06-4786-b9a5-7fee1e6077ea.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=504&id=ubff8dc9e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=504&originWidth=669&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33776&status=done&style=none&taskId=u7a443cff-23ce-4c2c-bf04-fe28d2c78cf&title=&width=669" alt="image.png"></li><li>最后点击执行<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664629310875-fb1754b0-a53e-404e-9fad-88e84bdb83d2.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=575&id=ufc3e3873&margin=%5Bobject%20Object%5D&name=image.png&originHeight=575&originWidth=525&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31407&status=done&style=none&taskId=ub44260a3-36ca-4a59-8d01-7e75eda8a4b&title=&width=525" alt="image.png"></li></ul><h3 id="方法-2：直接用-root-登陆"><a href="#方法-2：直接用-root-登陆" class="headerlink" title="方法 2：直接用 root 登陆"></a>方法 2：直接用 root 登陆</h3><ul><li>修改 root 权限<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664629383960-2666f8b2-071c-4eaa-bfc7-9af9b7c2d2a5.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=52&id=u3ccde418&margin=%5Bobject%20Object%5D&name=image.png&originHeight=52&originWidth=773&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7681&status=done&style=none&taskId=ue14cc1f8-b72c-40b5-a4e6-74e0c9e648b&title=&width=773" alt="image.png"></li><li>修改登陆信息<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664629402649-b8cf037e-5d8f-40c8-89cd-47f40da7abed.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=254&id=ua4a206b9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=254&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29443&status=done&style=none&taskId=ud2843d37-a817-47d7-b717-d97c2eac364&title=&width=618" alt="image.png"></li><li>按照如下执行<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1664629456023-9689e5ab-4250-409f-8035-3ea72afb828c.png#clientId=ucfcf0db7-4455-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=625&id=u907b8fa2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=625&originWidth=666&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40046&status=done&style=none&taskId=ud539e89e-f1e6-44c4-b118-77789263ec1&title=&width=666" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-git使用</title>
      <link href="/2022/09/29/bp1654/"/>
      <url>/2022/09/29/bp1654/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />![05.jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/22461670/1664449789859-6777a0f0-c974-4c36-a006-9d0969b195e4.jpeg#clientId=u98bb88aa-e751-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ud91ff7a8&margin=%5Bobject%20Object%5D&name=05.jpg&originHeight=1080&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1172826&status=done&style=none&taskId=u496a631c-1aef-48d5-858e-7b85a59bb17&title=)<h3 id="git-基本概念"><a href="#git-基本概念" class="headerlink" title="git 基本概念"></a>git 基本概念</h3><ul><li>工作区：仓库的目录。工作区是独立于各个分支的。</li><li>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</li><li>版本库：存放所有已经提交到本地仓库的代码版本</li><li>版本结构：树结构，树中每个节点代表一个代码版本</li></ul><h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><ol><li><code>git config --global user.name XXX</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮件地址，信息记录在<code>~/.gitconfig</code>文件中</li><li><code>git init</code>：将当前目录配置成 git 仓库，信息记录在隐藏的.git 文件夹中</li><li><code>git and XXX</code>：将 XXX 文件添加到暂存区<ol><li><code>git add .</code>：将所有待加入暂存区的文件加入暂存区</li></ol></li><li><code>git rm --cached XXX</code>：将文件从仓库索引目录中删掉</li><li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支</li><li><code>git status</code>：查看仓库状态</li><li><code>git diff XXX</code>：查看 XXX 文件相对于暂存区修改了哪些内容</li><li><code>git log</code>：查看当前分支的所有版本</li><li><code>git reflog</code>：查看 HEAD 指针的移动历史（包括被回滚的版本）</li><li><code>git reset --hard HEAD^</code>或<code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本</li><li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li><li><code>git reset --hard HEAD~100</code>：往上回滚 100 个版本</li><li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li><li><code>git checkout - xx</code>或<code>git restore xx</code>：将 xx 文件尚未加入暂存区的修改全部撤销</li><li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li><li><code>git push -u （第一次需要-u，以后不需要）</code>：将当前分支推送到远程仓库</li><li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li><li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库 XXX 下载到当前目录下</li><li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li><li><code>git branch</code>：查看所有分支和当前所处分支</li><li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li><li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li><li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li><li><code>git branch -d branch_name</code>：创建新分支</li><li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li><li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li><li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</li><li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li><li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li><li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li><li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li><li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li><li><code>git stash drop</code>：删除栈顶存储的修改</li><li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li><li><code>git stash list</code>：查看栈中所有元素</li></ol><h3 id="详细命令分类整理："><a href="#详细命令分类整理：" class="headerlink" title="详细命令分类整理："></a>详细命令分类整理：</h3><h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<del>/.gitconfig 文件中<br><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在</del>/.gitconfig 文件中<br><code>git init</code>：将当前目录配置成 git 仓库，信息记录在隐藏的.git 文件夹中</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>git add XX</code> ：将 XX 文件添加到暂存区<br><code>git commit -m </code>“给自己看的备注信息”：将暂存区的内容提交到当前分支<br><code>git status</code>：查看仓库状态<br><code>git log</code>：查看当前分支的所有版本<br><code>git push -u (第一次需要-u以后不需要) </code>：将当前分支推送到远程仓库<br><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库 XXX 下载到当前目录下<br><code>git branch</code>：查看所有分支和当前所处分支</p><h4 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h4><p><code>git diff XX</code>：查看 XX 文件相对于暂存区修改了哪些内容<br><code>git status</code>：查看仓库状态<br><code>git log</code>：查看当前分支的所有版本<br><code>git log --pretty=oneline</code>：用一行来显示<br><code>git reflog</code>：查看 HEAD 指针的移动历史（包括被回滚的版本）<br><code>git branch</code>：查看所有分支和当前所处分支<br><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</p><h4 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h4><p><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉，不希望管理这个文件<br><code>git restore --staged xx</code>：==将 xx 从暂存区里移除==<br><code>git checkout — XX或git restore XX</code>：==将 XX 文件尚未加入暂存区的修改全部撤销==</p><h4 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h4><p><code>git reset --hard HEAD^</code> 或<code>git reset --hard HEAD~ </code>：将代码库回滚到上一个版本<br><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推<br><code>git reset --hard HEAD~100</code>：往上回滚 100 个版本<br><code>git reset --hard 版本号</code>：回滚到某一特定版本</p><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库<br><code>git push -u (第一次需要-u以后不需要) </code>：将当前分支推送到远程仓库<br><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库<br><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库 XXX 下载到当前目录下<br><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支<br><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支<br><code>git checkout -t origin/branch_name</code> 将远程的<code>branch_name</code>分支拉取到本地<br><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并<br><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并<br><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</p><h4 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h4><p><code>git branch branch_name</code>：创建新分支<br><code>git branch</code>：查看所有分支和当前所处分支<br><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支<br><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支<br><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上<br><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支<br><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支<br><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支<br><code>git checkout -t origin/branch_name</code> 将远程的<code>branch_name</code>分支拉取到本地<br><code>git pull </code>：将远程仓库的当前分支与本地仓库的当前分支合并<br><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并<br><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</p><h4 id="stash-暂存"><a href="#stash-暂存" class="headerlink" title="stash 暂存"></a>stash 暂存</h4><p><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中<br><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素<br><code>git stash drop</code>：删除栈顶存储的修改<br><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素<br><code>git stash list</code>：查看栈中所有元素</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-ssh使用</title>
      <link href="/2022/09/29/ssudhg/"/>
      <url>/2022/09/29/ssudhg/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />![04.jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/22461670/1664443708854-9c07be95-2c9e-4682-967a-4e520dbe2ded.jpeg#clientId=u1fbdcd88-4185-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ub30353c0&margin=%5Bobject%20Object%5D&name=04.jpg&originHeight=1080&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=984831&status=done&style=none&taskId=u7622cdb8-532e-4386-b39f-1a10aa774ad&title=)<h3 id="ssh-登录"><a href="#ssh-登录" class="headerlink" title="ssh 登录"></a>ssh 登录</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>远程登录服务器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname</span><br></pre></td></tr></table></figure><ul><li><code>user</code>：用户名</li><li><code>hostname</code>：IP 地址或域名</li></ul><p>第一次登陆时会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;123.57.47.211 (123.57.47.211)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span></span><br></pre></td></tr></table></figure><p>输入<code>yes</code>，然后回车即可。<br>这样会将该服务器的信息记录在<code>~/.ssh/known_hosts</code>文件中。<br>然后输入密码即可登录到远程服务器中。</p><hr><p>默认登录端口号为 22。如果想要登陆某一特定端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname -p 22</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件<code>~/.ssh/config</code>。<br>然后在文件中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">  HostName IP 地址或域名</span><br><span class="line">  User 用户名</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">  HostName IP地址或域名</span><br><span class="line">  User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名<code>myserver1</code>、<code>myserver2</code>。</p><h4 id="密钥登陆"><a href="#密钥登陆" class="headerlink" title="密钥登陆"></a>密钥登陆</h4><p>创建密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后一直回车即可。<br>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。<br>例如，想免密登录<code>myserver</code>服务器。则将公钥中的内容，复制到<code>myserver</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。<br>也可以使用如下命令一键添加公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id myserver</span><br></pre></td></tr></table></figure><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@hostname <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单引号中的$i可以求值</span></span><br><span class="line">ssh myserver <span class="string">&#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双引号中的$i不可以求值</span></span><br><span class="line">ssh myserver <span class="string">&quot;for ((i = 0; i &lt; 10; i ++)) do echo <span class="variable">$i</span>; done&quot;</span></span><br></pre></td></tr></table></figure><h3 id="scp-传文件"><a href="#scp-传文件" class="headerlink" title="scp 传文件"></a>scp 传文件</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure><p>将<code>source</code>路径下的文件复制到<code>destination</code>中</p><hr><p>一次复制多个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp source1 source2 destination</span><br></pre></td></tr></table></figure><hr><p>复制文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:/home/acs/</span><br></pre></td></tr></table></figure><p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>/home/acs/</code>目录下。</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/tmp myserver:homework/</span><br></pre></td></tr></table></figure><p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>~/homework/</code>目录下。</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r myserver:homework .</span><br></pre></td></tr></table></figure><p>将<code>myserver</code>服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下。</p><hr><p>指定服务器的端口号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 source1 source2 destionation</span><br></pre></td></tr></table></figure><hr><p><strong>注意：</strong><code>scp</code>的<code>-r -P</code>等参数尽量加在<code>source</code>和<code>destination</code>之前。</p><hr><p><strong>使用</strong><code>**scp**</code><strong>配置其他服务器的</strong><code>**vim**</code><strong>和</strong><code>**tmux**</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.vimrc ~/.tmux.conf myserver:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-shell语法</title>
      <link href="/2022/09/22/pk0l7g/"/>
      <url>/2022/09/22/pk0l7g/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />![03.jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/22461670/1664170917796-43ecd86b-e265-4a94-a62d-5a180888d93d.jpeg#clientId=u54e2b87e-88f3-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u85713f50&margin=%5Bobject%20Object%5D&name=03.jpg&originHeight=1080&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=983124&status=error&style=none&taskId=uf3538808-74d4-43f5-b5d0-79413c24976&title=)<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>shell 脚本有多种多样，比如<code>Bourne Shell``Bourne Again Shell``C Shell``K Shell``zsh</code>……<br>但是 Linux 中默认使用的是<code>bash</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>bash</code>就要在文件开头写<code>#! /bin/bash</code>，用来指明 bash 为脚本编辑器。<br><strong>示例：</strong><br>新建一个 test.sh 文件，输入内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><hr><p><strong>运行：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh       # 使脚本具备可执行权限</span><br><span class="line">./test.sh              # 当前路径下执行</span><br><span class="line">bash test.sh # 使用解释器执行</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释:"></a>单行注释:</h4><p><code>#</code>之后的内容就是注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span><span class="comment">#这是注释</span></span><br></pre></td></tr></table></figure><hr><h4 id="多行注释："><a href="#多行注释：" class="headerlink" title="多行注释："></a>多行注释：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意 EOF可以替换成任意字符串</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">abc</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">abc</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>定义变量，不需要加<code>$</code>符号，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name1=<span class="string">&#x27;hxx&#x27;</span></span><br><span class="line">name2=<span class="string">&quot;hxx&quot;</span></span><br><span class="line">name3=hxx</span><br><span class="line"><span class="comment"># 定义字符串可以用单引号、双引号、不加引号</span></span><br></pre></td></tr></table></figure><hr><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>使用变量需要加上<code>$</code>符号，或者<code>$&#123;&#125;</code>符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=hxx</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>good</span><br></pre></td></tr></table></figure><hr><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用<code>readonly</code>或者<code>declare -r</code>可以将变量变成只读</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=hxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下边两个都可以</span></span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line"><span class="built_in">declare</span> -r name</span><br><span class="line"></span><br><span class="line">name=abc<span class="comment">#会报错，因为此时name为只读</span></span><br></pre></td></tr></table></figure><hr><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p><code>unset</code>可以删除变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=hxx</span><br><span class="line"><span class="built_in">unset</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span><span class="comment">#输出空行</span></span><br></pre></td></tr></table></figure><hr><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ul><li>自定义变量（局部变量）<br>子进程不能访问的变量</li><li>环境变量（全局变量）<br>子进程可以访问的变量</li></ul><ol><li>自定义变量改成环境变量，<code>export</code> 或者 <code>declare -x</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=hxx#定义变量</span><br><span class="line">export name#第一种方法</span><br><span class="line">declare -x name#第二种方法</span><br></pre></td></tr></table></figure><ol start="2"><li>环境变量改为自定义变量，<code>declare +x</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export name=hxx#定义环境变量</span><br><span class="line">declare +x name#改为自定义变量</span><br></pre></td></tr></table></figure><hr><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以使用单引号、双引号、不用引号<br><strong>单引号和双引号区别：</strong></p><ul><li>单引号中内容会原样输出，不会执行、不会取变量；</li><li>双引号中内容可以执行、可以取变量；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=hxx</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello,$name \&quot;hh\&quot;&#x27;</span> <span class="comment"># 单引号字符串，输出 hello,$name \&quot;hh\&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello,<span class="variable">$name</span> \&quot;hh\&quot;&quot;</span> <span class="comment"># 双引号字符串，输出 hello,hxx &quot;hh&quot;</span></span><br></pre></td></tr></table></figure><p><strong>获取字符串长度：</strong><br>使用<code>$&#123;#XXX&#125;</code>获取 XXX 变量的字符串长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=hxx</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span>  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure><p><strong>提取字串</strong><br>使用<code>$&#123;XXX:n1:len&#125;</code>提取 XXX 字符串中从 n1 开始的 len 个字符。n1 从 0 开始</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;hello,hxx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:0:5&#125;</span><span class="comment"># 提取从0开始的5个字符</span></span><br></pre></td></tr></table></figure><h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><h4 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h4><p>在执行 shell 脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。特殊的，<code>$0</code>是文件名（包含路径）。举例说明：</p><ol><li>创建文件<code>test.sh</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件名：&quot;</span><span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：&quot;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：&quot;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：&quot;</span><span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个参数：&quot;</span><span class="variable">$4</span></span><br></pre></td></tr></table></figure><ol start="2"><li>执行脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 test.sh</span><br><span class="line">./test.sh 1 2 3 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure><h4 id="其他参数相关变量"><a href="#其他参数相关变量" class="headerlink" title="其他参数相关变量"></a>其他参数相关变量</h4><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>$#</code></td><td>代表文件传入的参数个数，如上个例子中值为 4</td></tr><tr><td><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为<code>&quot;$1 $2 $3 $3&quot;</code></td></tr><tr><td><code>$@</code></td><td>每个参数分别用双引号括起来的字符串，如上例中<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot;</code></td></tr><tr><td><code>$$</code></td><td>脚本当前运行的进程 ID</td></tr><tr><td><code>$?</code></td><td>上一条命令的退出状态（注意不是 stdout，而是 exit code）。0 表示正常退出，其他值表示错误</td></tr><tr><td><code>$(command)</code></td><td>返回<code>command</code>这条命令的 stdout（可嵌套）</td></tr><tr><td><code>command</code></td><td>返回<code>command</code>这条命令的 stdout（不可嵌套）</td></tr></tbody></table><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>只支持一维数组，初始化时不需要指明数组大小。数组下标从 0 开始。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数组用小括号表示，元素之间用空格隔开。例如：<br><code>array=(1 abc &quot;def&quot; hxx)</code><br>也可以直接定义数组中某个元素的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=<span class="string">&quot;def&quot;</span></span><br><span class="line">array[3]=hxx</span><br></pre></td></tr></table></figure><h4 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a>读取数组中某个元素的值</h4><p><strong>格式：</strong><code>$&#123;array[index]&#125;</code><br><strong>例如：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> hxx)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="读取整个数组"><a href="#读取整个数组" class="headerlink" title="读取整个数组"></a>读取整个数组</h4><p><strong>格式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]&#125;</span><span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;array[*]&#125;</span><span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> hxx&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[@]&#125;</span><span class="comment">#第一张</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span><span class="comment">#第二种</span></span><br></pre></td></tr></table></figure><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><p>类似于字符串的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#array[@]&#125;</span><span class="comment"># 第一张</span></span><br><span class="line"><span class="variable">$&#123;#array[*]&#125;</span><span class="comment"># 第二种</span></span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> hxx<span class="string">&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo <span class="variable">$&#123;#array[@]&#125;</span># 第一种</span></span><br><span class="line"><span class="string">echo <span class="variable">$&#123;#array[*]&#125;</span># 第二种</span></span><br></pre></td></tr></table></figure><h3 id="expr-命令"><a href="#expr-命令" class="headerlink" title="expr 命令"></a>expr 命令</h3><p><code>expr</code>命令用于求表达式的值，格式为：<code>expr 表达式</code></p><h4 id="表达式说明"><a href="#表达式说明" class="headerlink" title="表达式说明"></a>表达式说明</h4><ul><li>用空格隔开每一项</li><li>用反斜杠放在 shell 特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li><code>expr</code>会在<code>stdout</code>中输出结果。如果为逻辑关系表达式，则结果为真，<code>stdout</code>为 1，否则为 0。</li><li><code>expr</code>的<code>exit code</code>：如果为逻辑关系表达式，则结果为真，<code>exit code</code>为 0，否则为 1。</li></ul><h4 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h4><ul><li><code>expr length XXX</code>：返回字符串<code>XXX</code>的长度</li><li><code>expr index XXX YY</code>：<code>YY中</code>任意单个字符在<code>XXX</code>中最前面的字符位置，<strong>下标从 1 开始。</strong>如果在<code>XXX</code>中完全不存在<code>YY中</code>的字符，则返回 0</li><li><code>expr substr XXX START LENGTH</code>：返回<code>XXX</code>字符串中从<code>START</code>开始，长度最大为<code>LENGTH</code>的子串。如果<code>START</code>或者<code>LENGTH</code>为负数，0 或非数值，则返回空字符串。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> length <span class="string">&quot;<span class="variable">$str</span>&quot;</span>`<span class="comment"># `` 不是单引号，表示执行该命令，输出为12  也可以使用$&#123;&#125;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> aWd`<span class="comment"># 输出7，下标从1开始</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> substr <span class="string">&quot;<span class="variable">$str</span>&quot;</span> 2 4`<span class="comment"># 输出 ello</span></span><br></pre></td></tr></table></figure><h4 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h4><p><code>expr</code>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li><code>+ -</code>：加减运算。两端参数会转换为整数，如果转换失败则报错。</li><li><code>* / %</code>：乘、除、取模运算。两端参数会转换为整数，如果转换失败则报错。</li><li><code>()</code>：可以改变优先级，但需要用反斜杠转义。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`<span class="comment"># 输出7</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>`<span class="comment"># 输出-1</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>`<span class="comment"># 输出12，需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> / <span class="variable">$b</span>`<span class="comment"># 输出0，整除</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> % <span class="variable">$b</span>`<span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> \( <span class="variable">$a</span> + 1 \) \* \( <span class="variable">$b</span> + 1 \)`<span class="comment"># 输出20，值为(a + 1) * (b + 1)</span></span><br></pre></td></tr></table></figure><h4 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a>逻辑关系表达式</h4><ul><li><code>|</code>：如果第一个参数非空且非 0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非 0，否则返回 0。如果第一个参数是非空且非 0，不会计算第二个参数。</li><li><code>&amp;</code>：如果两个参数都非空且非 0，则返回第一个参数，否则返回 0。如果第一个参数为 0 或者为空，则不会计算第二个参数。</li><li><code>&lt;``&lt;=``=``==``!=``&gt;=``&gt;</code>：比较两端的参数，如果为 true，则返回 1，否则返回 0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li><code>()</code>：可以改变优先级，但需要用反斜杠转义</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&gt; <span class="variable">$b</span>`<span class="comment"># 输出0，&gt;需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="variable">$b</span>`<span class="comment"># 输出1，也可以将特殊字符用引号引起来</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&gt;=&#x27;</span> <span class="variable">$b</span>`<span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&lt;\= <span class="variable">$b</span>`<span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \&amp; <span class="variable">$d</span>`<span class="comment">#输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&amp; <span class="variable">$b</span>`<span class="comment">#输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \| <span class="variable">$d</span>`<span class="comment">#输出5</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \| <span class="variable">$b</span>`<span class="comment">#输出3</span></span><br></pre></td></tr></table></figure><h3 id="Read-命令"><a href="#Read-命令" class="headerlink" title="Read 命令"></a>Read 命令</h3><p><code>read</code>命令用于从标准输入中读取单行数据。当读到文件结束符时，<code>exit code</code>为 1，否则为 0。</p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><code>-p</code>：后面可以接提示信息</li><li><code>-t</code>：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p><strong>例子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> name<span class="comment"># 读入name的值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span><span class="comment"># 输出name的值</span></span><br><span class="line"></span><br><span class="line">red -p <span class="string">&quot;请输入你的名字：&quot;</span> -t 30 name<span class="comment"># 读入name的值，等待时间30秒</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span><span class="comment"># 输出name的值</span></span><br></pre></td></tr></table></figure><h3 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h3><p><code>echo</code>用于输出字符串。例如：<code>echo XXXX</code></p><h4 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">echo</span> Hello World<span class="comment"># 引号可以省略</span></span><br></pre></td></tr></table></figure><h4 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello World\&quot;&quot;</span><span class="comment"># 注意只能使用双引号，如果使用单引号，则不转义</span></span><br><span class="line"><span class="built_in">echo</span> \&quot;Hello World\&quot;<span class="comment"># 也可以省略双引号</span></span><br></pre></td></tr></table></figure><h4 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=hxx</span><br><span class="line"><span class="built_in">echo</span> :<span class="string">&quot;My name is <span class="variable">$name</span>&quot;</span><span class="comment"># 输出 My name is hxx</span></span><br></pre></td></tr></table></figure><h4 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;H1\n&quot;</span><span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">Hi</span><br><span class="line"></span><br><span class="line">world</span><br></pre></td></tr></table></figure><h4 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi \c&quot;</span><span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">Hi world</span><br></pre></td></tr></table></figure><h4 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h4><p><code>echo &quot;Hello World&quot; &gt; output.txt</code>：将内容以覆盖的方式输出到 output.txt 中</p><h4 id="原样输出字符串，不进行转义或取变量（用单引号）"><a href="#原样输出字符串，不进行转义或取变量（用单引号）" class="headerlink" title="原样输出字符串，不进行转义或取变量（用单引号）"></a>原样输出字符串，不进行转义或取变量（用单引号）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=world</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="variable">$name</span>\&quot;</span><br></pre></td></tr></table></figure><h4 id="显示命令的执行结果"><a href="#显示命令的执行结果" class="headerlink" title="显示命令的执行结果"></a>显示命令的执行结果</h4><p><code>echo </code>date``：输出：<code>Web Seq 1 19:29:40 CST 2022</code></p><h3 id="printf-命令"><a href="#printf-命令" class="headerlink" title="printf 命令"></a>printf 命令</h3><p><code>printf</code>命令用于格式化输出，类似于<code>C/C++</code>中的<code>printf</code>函数<br>默认<strong>不会在字符串末尾添加换行符</strong><br>命令格式：<code>printf format-string [arguments.....]</code></p><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%10d.\n&quot;</span> 123<span class="comment"># 占10位，右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10.2f.\n&quot;</span> 123.123321<span class="comment"># 占10位，保留2位小数，左对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;My name is %s\n&quot;</span> <span class="string">&quot;hxx&quot;</span><span class="comment"># 格式化输出字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d * %d = %d\n&quot;</span> 2 3 `<span class="built_in">expr</span> 2 \* 3`<span class="comment"># 表达式的值作为参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">       123.</span><br><span class="line">123.12    .</span><br><span class="line">My name is hxx</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><h3 id="test-命令与判断符号"><a href="#test-命令与判断符号" class="headerlink" title="test 命令与判断符号[]"></a>test 命令与判断符号[]</h3><h4 id="逻辑运算符-amp-amp-和"><a href="#逻辑运算符-amp-amp-和" class="headerlink" title="逻辑运算符 &amp;&amp; 和 ||"></a>逻辑运算符 &amp;&amp; 和 ||</h4><ul><li><code>&amp;&amp;</code>表示与，<code>||</code>表示或</li><li>二者具有短路原则：<br><code>expr1 &amp;&amp; expr2</code>：当<code>expr1</code>为假时，直接忽略<code>expr2</code><br><code>expr1 || expr2</code>：当<code>expr1</code>为真时，直接忽略<code>expr2</code></li><li>表达式的<code>exit code</code>为 0，表示真；为非零，表示假。（与<code>c/c++</code>中定义相反）</li></ul><h4 id="test-命令"><a href="#test-命令" class="headerlink" title="test 命令"></a>test 命令</h4><p>在命令行中输入<code>man test</code>，可以查看<code>test</code>命令的用法。<br><code>test</code>命令用于判断文件类型，以及对变量做比较。<br><code>test</code>命令用<code>exit code</code>返回结果，而不是使用<code>stdout</code>。0 表示真，非 0 表示假。<br><strong>举例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> 2 -lt 3<span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $?<span class="comment"># 输出上个命令的返回值，输出0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux中输入如下：</span></span><br><span class="line"><span class="built_in">ls</span>     <span class="comment">#结果：test.sh  tmp  output.txt</span></span><br><span class="line"><span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span><span class="comment"># 结果为exist</span></span><br><span class="line"><span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span><span class="comment"># 结果为Not exist</span></span><br></pre></td></tr></table></figure><h4 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h4><p>命令格式：<code>test -e filename</code>用来判断文件是否存在</p><table><thead><tr><th><strong>测试参数</strong></th><th><strong>代表意义</strong></th></tr></thead><tbody><tr><td>-e</td><td>文件是否存在</td></tr><tr><td>-f</td><td>是否为文件</td></tr><tr><td>-d</td><td>是否为目录</td></tr></tbody></table><h4 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h4><p>命令格式：<code>test -r filename</code>用来判断文件是否可读</p><table><thead><tr><th><strong>测试参数</strong></th><th><strong>代表意义</strong></th></tr></thead><tbody><tr><td>-r</td><td>文件是否可读</td></tr><tr><td>-w</td><td>文件是否可写</td></tr><tr><td>-x</td><td>文件是否可执行</td></tr><tr><td>-s</td><td>是否为非空文件</td></tr></tbody></table><h4 id="整数间的比较"><a href="#整数间的比较" class="headerlink" title="整数间的比较"></a>整数间的比较</h4><p>命令格式：<code>test $a -eq $b</code>用来判断 a 是否等于 b</p><table><thead><tr><th><strong>测试参数</strong></th><th><strong>代表意义</strong></th></tr></thead><tbody><tr><td>-eq</td><td>a 是否等于 b</td></tr><tr><td>-ne</td><td>a 是否不等于 b</td></tr><tr><td>-gt</td><td>a 是否大于 b</td></tr><tr><td>-lt</td><td>a 是否小于 b</td></tr><tr><td>-ge</td><td>a 是否大于等于 b</td></tr><tr><td>-le</td><td>a 是否小于等于 b</td></tr></tbody></table><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><table><thead><tr><th><strong>测试参数</strong></th><th><strong>代表意义</strong></th></tr></thead><tbody><tr><td>test -z STRING</td><td>判断 STRING 是否为空，如果为空，则返回 true</td></tr><tr><td>test -n STRING</td><td>判断 STRING 是否为空，如果非空，则返回 true（-n 可以忽略）</td></tr><tr><td>test str1 == str2</td><td>判断 str1 是否等于 str2</td></tr><tr><td>test str1 != str2</td><td>判断 str1 是否不等于 str2</td></tr></tbody></table><h4 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a>多重条件判定</h4><p>命令格式：<code>test -r filename -a -x filename</code></p><table><thead><tr><th><strong>测试参数</strong></th><th><strong>代表意义</strong></th></tr></thead><tbody><tr><td>-a</td><td>两条件是否同时成立</td></tr><tr><td>-o</td><td>两条件是否至少一个成立</td></tr><tr><td>!</td><td>取反。如 test ! -x file，当 file 不可执行时，返回 true</td></tr></tbody></table><h4 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a>判断符号[]</h4><p><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于<code>if</code>语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。<br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3]<span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $? <span class="comment"># 输出上个命令的返回值，输出0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux下边输入</span></span><br><span class="line"><span class="built_in">ls</span><span class="comment"># 列出当前目录下文件：homework test.sh  tmp</span></span><br><span class="line">[ -e test.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span><span class="comment"># 文件存在，结果输出为：exist</span></span><br><span class="line">[ -e test2.sh] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span><span class="comment"># 结果输出为：Not exist</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>[]</code>内每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来</li></ul><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;hello World&quot;</span></span><br><span class="line">[ <span class="variable">$name</span> == <span class="string">&quot;hello World&quot;</span> ]<span class="comment"># 错误，等价于 [ hello World == &quot;hello World&quot;]，参数太多</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$name</span>&quot;</span> == <span class="string">&quot;hello World&quot;</span> ]  <span class="comment"># 正确</span></span><br></pre></td></tr></table></figure><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><h4 id="if-then-形式"><a href="#if-then-形式" class="headerlink" title="if-then 形式"></a>if-then 形式</h4><p>类似于<code>C/C++</code>中的<code>if-else</code>语句。</p><h4 id="单层-if"><a href="#单层-if" class="headerlink" title="单层 if"></a>单层 if</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -gt 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>在范围内</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：3 在范围内</p><h4 id="单层-if-else"><a href="#单层-if-else" class="headerlink" title="单层 if-else"></a>单层 if-else</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>不小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：3 小于 4</p><h4 id="多层-if-elif-elif-else"><a href="#多层-if-elif-elif-else" class="headerlink" title="多层 if-elif-elif-else"></a>多层 if-elif-elif-else</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 3 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> 其他</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>输出结果：<code>其他</code></p><h4 id="case…esac-形式"><a href="#case…esac-形式" class="headerlink" title="case…esac 形式"></a>case…esac 形式</h4><p>类似于<code>C/C++</code>中的<code>switch</code>语句<br>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名称 <span class="keyword">in</span></span><br><span class="line">值1)</span><br><span class="line">  语句1</span><br><span class="line">  语句2</span><br><span class="line">  ...</span><br><span class="line">    ;;<span class="comment"># 类似于C/C++中的break</span></span><br><span class="line">值2)</span><br><span class="line">  语句1</span><br><span class="line">  语句2</span><br><span class="line">  ...</span><br><span class="line">  ;;</span><br><span class="line">*)<span class="comment"># 类似于C/C++中的default</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">  ...</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></span><br><span class="line">1)</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line">  ;;</span><br><span class="line">2)</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line">  ;;</span><br><span class="line">  3)</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line">  *)</span><br><span class="line">  <span class="built_in">echo</span> 其他</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>输出结果：<code>其他</code></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a>for…in…do…done</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> val1 val2 val3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 1，输出 a 2 cc，每个元素一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a 2 cc</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 2，输出当前路径下的所有文件名，每个文件名一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 3，输出 1-10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例 4，使用<code>&#123;1..10&#125; 或者 &#123;a..z&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;a..z&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a>for ((…;…;…)) do…done</h4><p>命令格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((expression;condition;expression))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例，输出 1-10，每个数占一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=1; i&lt;=10; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="while…do…done-循环"><a href="#while…do…done-循环" class="headerlink" title="while…do…done 循环"></a>while…do…done 循环</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> conditon</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例，文件结束符为<code>Ctrl+d</code>，输入文件结束符后<code>read</code>指令返回 false</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="until…do…done-循环"><a href="#until…do…done-循环" class="headerlink" title="until…do…done 循环"></a>until…do…done 循环</h4><p>当条件为真时结束<br>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例，当用户输入<code>yes</code>或者<code>YES</code>时结束，否则一直等待读入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;yes&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;YES&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -P <span class="string">&quot;Please input yes/YES to stop this program：&quot;</span> word</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="break-命令"><a href="#break-命令" class="headerlink" title="break 命令"></a>break 命令</h4><p>跳出当前一层循环，注意与<code>C/C++</code>不同的是：<code>break</code>不能跳出<code>case</code>语句。<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></span><br><span class="line">    8)</span><br><span class="line">      <span class="built_in">break</span></span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>该实例每读入非 EOF 的字符串，会输出一遍 1-7。<br>该程序可以输入<code>Ctrl+d</code>文件结束符来结束，也可以直接用<code>Ctrl+c</code>杀掉该进程。</p><h4 id="continue-命令"><a href="#continue-命令" class="headerlink" title="continue 命令"></a>continue 命令</h4><p>跳出当前循环<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ `<span class="built_in">expr</span> <span class="variable">$i</span> % 2` -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>该程序输出 1-10 中的所有奇数</p><h4 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a>死循环的处理方式</h4><p>如果出现死循环等，可以输入<code>Ctrl+c</code>即可。<br>否则可以直接关闭进程（慎用）：</p><ol><li>使用<code>top</code>命令找到进程 PID</li><li>输入<code>kill -9 PID</code>即可关掉此进程</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><code>bash</code>中的函数类似于<code>C/C++</code>中的函数，但<code>return</code>的返回值与<code>C/C++</code>不同，返回的是<code>exit code</code>，取值为 0-255，0 表示正常结束。<br>如果想获取函数的输出结果，可以通过<code>echo</code>输出到<code>stdout</code>中，然后通过<code>$(function_name)</code>来获取<code>stdout</code>中的结果。<br>函数的<code>return</code>值可以通过<code>$?</code>来获取。<br>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">function</span>] <span class="function"><span class="title">func_name</span></span>() &#123;<span class="comment"># function关键字可以省略</span></span><br><span class="line">  语句1</span><br><span class="line">  语句2</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不获取return值和stdout值"><a href="#不获取return值和stdout值" class="headerlink" title="不获取return值和stdout值"></a>不获取<code>return</code>值和<code>stdout</code>值</h4><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">  name=hxx</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br></pre></td></tr></table></figure><p>输出结果：<code>Hello hxx</code></p><h4 id="获取return值和stdout值"><a href="#获取return值和stdout值" class="headerlink" title="获取return值和stdout值"></a>获取<code>return</code>值和<code>stdout</code>值</h4><p>不写<code>return</code>时，默认<code>return 0</code>。<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">  name=hxx</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;output = <span class="variable">$output</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;return = <span class="variable">$ret</span>&quot;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = Hello hxx</span><br><span class="line"><span class="built_in">return</span> = 123</span><br></pre></td></tr></table></figure><h4 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a>函数的输入参数</h4><p>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。<br>注意：函数内的<code>$0</code>仍然是文件名，而不是函数名。<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;<span class="comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span></span><br><span class="line">  word=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&quot;要进入func(<span class="variable">$1</span>)函数吗？请输入y/n：&quot;</span> word</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$word</span>&quot;</span> == <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> 0</span><br><span class="line">      <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$1</span> -le 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> 0</span><br><span class="line">      <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sum</span>=$(func $(<span class="built_in">expr</span> <span class="variable">$1</span> - 1))</span><br><span class="line">  <span class="built_in">echo</span> $(<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：<code>55</code></p><h4 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h4><p>可以在函数内定义局部变量，作用范围仅在当前函数内。<br>可以在递归函数中定义局部变量。<br>命令格式：<code>local 变量名=变量名</code><br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> name=hxx</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一行是函数内的 name 变量，第二行是函数外调用 name 变量，会发现此时该变量不存在。</p><h3 id="exit-命令"><a href="#exit-命令" class="headerlink" title="exit 命令"></a>exit 命令</h3><p><code>exit</code>命令用来退出当前<code>shell</code>进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。<br><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。<br><code>exit</code>退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其他值都表示失败。<br>示例：<br>创建脚本<code>test.sh</code>，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ] <span class="comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;arguments not valid&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;arguments valid&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>linux 中执行该脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chomod +x test.sh</span><br><span class="line">./test.sh 1<span class="comment"># 结果是：arguments valid</span></span><br><span class="line"><span class="built_in">echo</span> $?<span class="comment"># 传入一个参数，则正常退出，exit code为0</span></span><br><span class="line">./test.sh<span class="comment"># 结果是arguments not valid</span></span><br><span class="line"><span class="built_in">echo</span> $?<span class="comment"># 传入参数个数不是1，则非正常退出，exit code为1</span></span><br></pre></td></tr></table></figure><h3 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h3><p>每个进程默认打开 3 个文件描述符</p><ul><li><code>stdin</code>标准输入，从命令行读取数据，文件描述符为 0</li><li><code>stdout</code>标准输出，向命令行输出数据，文件描述符为 1</li><li><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为 2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><h4 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>command &gt; file</code></td><td>将<code>stdout</code>重定向到<code>file</code>中</td></tr><tr><td><code>command &lt; file</code></td><td>将<code>stdin</code>重定义到<code>file</code>中</td></tr><tr><td><code>command &gt;&gt; file</code></td><td>将<code>stdout</code>以追加方式重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt; file</code></td><td>将文件描述符<code>n</code>重定向到<code>file</code>中</td></tr><tr><td><code>command n&gt;&gt; file</code></td><td>将文件描述符<code>n</code>以追加方式重定向到<code>file</code>中</td></tr></tbody></table><h4 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hello \c&quot;</span> &gt; output.txt<span class="comment"># 将stdout重定向到output.txt中</span></span><br><span class="line">ehco <span class="string">&quot;World&quot;</span> &gt;&gt; output.txt<span class="comment"># 将字符串追加到output.txt中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> str &lt; output.txt<span class="comment"># 从output.txt 中读取字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span><span class="comment"># 输出结果：Hello World</span></span><br></pre></td></tr></table></figure><h4 id="同时重定向-stdin-和-stdout"><a href="#同时重定向-stdin-和-stdout" class="headerlink" title="同时重定向 stdin 和 stdout"></a>同时重定向 stdin 和 stdout</h4><p>创建 bash 脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！ /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">read</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">expr</span> <span class="string">&quot;<span class="variable">$a</span>&quot;</span> + <span class="string">&quot;<span class="variable">$b</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建 input.txt，里面的内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>linux 中执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x test.sh<span class="comment"># 添加可执行权限</span></span><br><span class="line">./test.sh &lt; input.txt &gt; output.txt<span class="comment"># 从input.txt中读取内容，将输出写入到output.txt中</span></span><br><span class="line"><span class="built_in">cat</span> output.txt<span class="comment"># 查看output.txt中的内容结果是7</span></span><br></pre></td></tr></table></figure><h3 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h3><p>类似于<code>C/C++</code>中的<code>include</code>操作，<code>bash</code>也可以引入其他文件中的代码。<br>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. filename<span class="comment"># 注意点和文件名之间有一个空格</span></span><br><span class="line">或者</span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure><p><strong>示例：</strong><br>创建<code>test1.sh</code>，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=hxx<span class="comment"># 定义变量name</span></span><br></pre></td></tr></table></figure><p>然后创建<code>test2.sh</code>，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> test1.sh<span class="comment"># 或 . test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> My name is: <span class="variable">$name</span><span class="comment"># 可以使用test1.sh中的变量</span></span><br></pre></td></tr></table></figure><p>Linux 中执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chomod +x test2.sh</span><br><span class="line">./test2.sh<span class="comment"># 结果：My name is：hxx</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim使用教程</title>
      <link href="/2022/09/22/id07re/"/>
      <url>/2022/09/22/id07re/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />![02.jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/22461670/1664170899685-a97b170f-71ba-4ff6-ac9e-760d5b26f4c5.jpeg#clientId=u5469a7ae-c196-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uc5683771&margin=%5Bobject%20Object%5D&name=02.jpg&originHeight=1080&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=847435&status=done&style=none&taskId=uac1f987f-9da4-404d-9873-2a182e9598f&title=)<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li>一般命令模式（默认模式）<br>命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。</li><li>编辑模式<br>在一般命令模式里按下<code>i</code>，会进入编辑模式。按下<code>ESC</code>会退出编辑模式，返回到一般命令模式。</li><li>命令行模式<br>在一般命令模式里按下<code>:``/``?</code>三个字母中的任意一个，会进入命令行模式。命令行在最下面。可以查找、替换、保存、退出、配置编辑器等。</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><table><thead><tr><th><strong>按键</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><code>h</code> 或 <code>←</code></td><td>光标向左移动一个字符</td></tr><tr><td><code>j</code> 或 <code>↓</code></td><td>光标向下移动一个字符</td></tr><tr><td><code>k</code> 或 <code>↑</code></td><td>光标向上移动一个字符</td></tr><tr><td><code>l</code> 或 <code>→</code></td><td>光标向右移动一个字符</td></tr><tr><td><code>n``&lt;Space&gt;</code></td><td>n 代表数字，按下数字再按空格，光标会向右移动 n 个字符</td></tr><tr><td><code>0</code> 或 <code>[Home]</code></td><td>光标移动到本行开头</td></tr><tr><td><code>$</code> 或 <code>[End]</code></td><td>光标移动到本行末尾</td></tr><tr><td><code>G</code></td><td>光标移动到最后一行</td></tr><tr><td><code>:n</code> 或 <code>nG</code></td><td>光标移动到第 n 行</td></tr><tr><td><code>gg</code></td><td>光标移动到第一行，相当于 1G</td></tr><tr><td><code>n``&lt;Enter&gt;</code></td><td>光标向下移动 n 行</td></tr><tr><td><code>/word</code></td><td>往光标以下寻找第一个值为 word 的字符串</td></tr><tr><td><code>?word</code></td><td>往光标以上寻找第一个值为 word 的字符串</td></tr><tr><td><code>n</code></td><td>重复前一个查找操作</td></tr><tr><td><code>N</code></td><td>反向重复前一个查找操作</td></tr><tr><td><code>:n1,n2s/word1/word2/g</code></td><td>在 n1 行与 n2 行之间寻找 word1 这个字符串，并将其替换为 word2</td></tr><tr><td><code>:1,$s/word1/word2/g</code></td><td>将全文的 word1 替换为 word2</td></tr><tr><td><code>:1,$s/word1/word2/gc</code></td><td>将全文的 word1 替换为 word2，并且在替换前要求用户确认</td></tr><tr><td><code>v</code></td><td>选中文本</td></tr><tr><td><code>d</code></td><td>删除选中的文本</td></tr><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>y</code></td><td>复制选中的文本</td></tr><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>p</code></td><td>将复制的数据在光标的下一行 / 下一个位置粘贴</td></tr><tr><td><code>u</code></td><td>撤销</td></tr><tr><td><code>Ctrl</code>+<code>r</code></td><td>取消撤销</td></tr><tr><td><code>&gt;</code></td><td>大于号，将选中的文本整体向右缩进一次</td></tr><tr><td><code>&lt;</code></td><td>小于号，将选中的文本整体向左缩进一次</td></tr><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:w!</code></td><td>强制保存</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:q!</code></td><td>强制退出</td></tr><tr><td><code>:wq</code></td><td>保存并退出</td></tr><tr><td><code>:set paste</code></td><td>设置为粘贴模式，取消代码自动缩进</td></tr><tr><td><code>:set nopaste</code></td><td>取消粘贴模式，开启代码自动缩进</td></tr><tr><td><code>:set nu</code></td><td>显示行号</td></tr><tr><td><code>:set nonu</code></td><td>隐藏行号</td></tr><tr><td><code>gg=G</code></td><td>将全文代码格式化</td></tr><tr><td><code>:noh</code></td><td>关闭查找关键词高亮</td></tr><tr><td><code>Ctrl</code>+<code>q</code></td><td>当 vim 卡死时，可以取消当前正在执行的命令</td></tr></tbody></table><p><strong>注意：每次用 vim 编辑文件时，会自动创建一个</strong><code>**.filename.swp**</code><strong>的临时文件。如果打开某个文件，该文件的 swp 文件已存在就会报错。此时有两个解决方法：1.找到正在打开该文件的程序并退出它。2.直接删掉该 swp 文件。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-tmux使用</title>
      <link href="/2022/09/22/rk8a00/"/>
      <url>/2022/09/22/rk8a00/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />![01.jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/22461670/1664170865524-92ff0195-8aaf-48fd-9ebb-6b726bbe2b63.jpeg#clientId=ua64032b3-a1c7-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u1684828e&margin=%5Bobject%20Object%5D&name=01.jpg&originHeight=1080&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1104279&status=done&style=none&taskId=uc7cdc979-3dfa-4902-b325-38959cdc994&title=)<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>分屏</li><li>断开连接后会继续运行进程，重新连接会恢复原本状态</li><li>结构：包括 <code>会话（session）</code>，<code>窗口（window）</code>，<code>窗格（pane）</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1663813513638-14a45542-3659-428f-b779-a09842bedc70.png#clientId=u721b3cfa-1194-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=386&id=u430f2550&margin=%5Bobject%20Object%5D&name=image.png&originHeight=483&originWidth=697&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35206&status=error&style=none&taskId=u5fd67845-f948-400b-b658-cdf6e4216c0&title=&width=557.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22461670/1663813553118-5d8ed62c-2f2b-499c-8577-3f90d46e588b.png#clientId=u721b3cfa-1194-4&crop=0&crop=0&crop=1&crop=0.9545&errorMessage=unknown%20error&from=paste&height=400&id=ucc6c8172&margin=%5Bobject%20Object%5D&name=image.png&originHeight=575&originWidth=1040&originalType=url&ratio=1&rotation=0&showTitle=false&size=115122&status=error&style=none&taskId=u164e60a6-e27a-4fe4-a339-35f17496cfa&title=&width=724" alt="image.png"></li></ul><h3 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h3><table><thead><tr><th><strong>按键</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><code>tmux</code></td><td>新建</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>%</code></td><td>分成左右两个 pane</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>&quot;</code></td><td>分成上下两个 pane</td></tr><tr><td><code>Ctrl</code>+<code>d</code></td><td>关闭 pane，逐个往上关闭（不建议使用）</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>←``↓``↑``→</code></td><td>选择相邻的 pane</td></tr><tr><td><code>Ctrl</code>+<code>b</code>+<code>←``↓``↑``→</code></td><td>调整相邻的 pane 分割线</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>z</code></td><td>pane 全屏、取消全屏</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>d</code></td><td>挂起当前的 session</td></tr><tr><td><code>tmux</code>+<code>a</code></td><td>打开挂起的 session</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>s</code></td><td>选择其他的 session</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>c</code></td><td>在当前的 session 中创建新的 window</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>w</code></td><td>选择其他的 window</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>pageUp</code></td><td>翻阅当前的 pane 内容</td></tr><tr><td><code>shift</code></td><td>选中文本</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>[</code></td><td>复制当前选中的文本</td></tr><tr><td><code>Ctrl</code>+<code>b</code> <code>]</code></td><td>粘贴已经复制的文本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
